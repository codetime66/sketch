lista de servidores

zaster01.stelo.intranet
zaster02.stelo.intranet
zaster03.stelo.intranet
zorker01.stelo.intranet
zorker02.stelo.intranet
zorker03.stelo.intranet
zorker04.stelo.intranet
zorker05.stelo.intranet
zorker06.stelo.intranet
��NAME,STATE,STATUS,HOST,PROVISIONED SPACE,USED SPACE,HOST CPU - MHZ,HOST MEM - MB,GUEST MEM - %,MEMORY SIZE,CPU COUNT,NOTES,ALARM ACTIONS
zaster01,Powered On,Normal,10.150.238.241,18.16 GB,4.78 GB,0,504,0%,2048 MB,2,,Enabled
zaster02,Powered On,Normal,10.150.238.222,18.16 GB,4.78 GB,0,458,0%,2048 MB,2,,Enabled
zaster03,Powered On,Normal,10.150.238.235,18.16 GB,4.78 GB,0,453,0%,2048 MB,2,,Enabled

��NAME,STATE,STATUS,HOST,PROVISIONED SPACE,USED SPACE,HOST CPU - MHZ,HOST MEM - MB,GUEST MEM - %,MEMORY SIZE,CPU COUNT,NOTES,ALARM ACTIONS
zorker01,Powered On,Normal,10.150.238.241,18.16 GB,4.78 GB,0,458,3%,2048 MB,2,,Enabled
zorker02,Powered On,Normal,10.150.238.241,18.16 GB,4.78 GB,0,456,4%,2048 MB,2,,Enabled
zorker03,Powered On,Normal,10.150.238.222,18.16 GB,4.78 GB,0,456,9%,2048 MB,2,,Enabled
zorker04,Powered On,Normal,10.150.238.222,18.16 GB,4.78 GB,0,465,9%,2048 MB,2,,Enabled
zorker05,Powered On,Normal,10.150.238.235,18.16 GB,4.78 GB,0,456,10%,2048 MB,2,,Enabled
zorker06,Powered On,Normal,10.150.238.235,18.16 GB,4.78 GB,0,463,9%,2048 MB,2,,Enabled
vejam a divisao dos servidores vm nos fisico

******************************************************

[root@zaster01 ~]# kubectl get nodes -o wide
NAME                      STATUS   ROLES    AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION              CONTAINER-RUNTIME
zaster01.stelo.intranet   Ready    master   3h41m   v1.14.1   10.150.122.9    <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker04.stelo.intranet   Ready    <none>   5m6s    v1.14.1   10.150.122.15   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker05.stelo.intranet   Ready    <none>   53m     v1.14.1   10.150.122.16   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6

[root@zaster02 ~]# kubectl get nodes -o wide
NAME                      STATUS   ROLES    AGE    VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION              CONTAINER-RUNTIME
zaster02.stelo.intranet   Ready    master   144m   v1.14.1   10.150.122.10   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker01.stelo.intranet   Ready    <none>   131m   v1.14.1   10.150.122.12   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker06.stelo.intranet   Ready    <none>   4m1s   v1.14.1   10.150.122.17   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6

[root@zaster03 ~]# kubectl get nodes -o wide
NAME                      STATUS   ROLES    AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION              CONTAINER-RUNTIME
zaster03.stelo.intranet   Ready    master   67m     v1.14.1   10.150.122.11   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker02.stelo.intranet   Ready    <none>   2m17s   v1.14.1   10.150.122.13   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6
zorker03.stelo.intranet   Ready    <none>   39m     v1.14.1   10.150.122.14   <none>        CentOS Linux 7 (Core)   3.10.0-957.5.1.el7.x86_64   docker://18.9.6


################################################################################################################################
zaster01.stelo.intranet
################################################################################################################################

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.150.122.9:6443 --token ixjrns.t3b29gdiunzwnhs7 --discovery-token-ca-cert-hash sha256:647baccd33040c8f24aa49c6d46a4c232562b624d995fb84c9ceabe36caa7eaf
	
################################################################################################################################
zaster02.stelo.intranet
################################################################################################################################
	
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.150.122.10:6443 --token 88zb4p.ziu9ozuyqssvw2yo --discovery-token-ca-cert-hash sha256:b4acae31e8aac28de06188ac91adacdb10a6496148ac845520b83fc24aaa46e5	
	
################################################################################################################################
zaster03.stelo.intranet
################################################################################################################################

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.150.122.11:6443 --token 6njau2.v1o4s8fdoac79qbb --discovery-token-ca-cert-hash sha256:2dd46dc869b6ebdfce2a158a274595a16f7f4bdee97f73375bf986a5ea4bcf6a
	
*****************************************
*************************************
*******************************

#CONFIGURACOES PROXY:

export no_proxy=".stelo.local, .stelo.intranet, 10.0.0.0/8, 127.0.0.1, localhost"
export http_proxy=http://proxy.stelo.intranet:3130/
export https_proxy=http://proxy.stelo.intranet:3130/


#PRE REQUISITOS:
	
setenforce 0
sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux	
	
modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

swapoff -a

vi /etc/fstab
#/dev/mapper/centos-swap swap                    swap    defaults        0 0	

#INSTALACAO DOCKER:

yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce

vi ./usr/lib/systemd/system/docker.service
Environment="HTTPS_PROXY=proxy.stelo.intranet:3130" "NO_PROXY=.stelo.local, .stelo.intranet, 10.0.0.0/8"


#INSTALACAO KUBERNETES:

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum install -y kubelet kubeadm kubectl

!!!!!!!!!!!!!
reboot
!!!!!!!!!!!!!

#CONFIGURACOES PROXY:

export no_proxy=".stelo.local, .stelo.intranet, 10.0.0.0/8, 127.0.0.1, localhost"
export http_proxy=http://proxy.stelo.intranet:3130/
export https_proxy=http://proxy.stelo.intranet:3130/

#

systemctl start docker && systemctl enable docker
systemctl start kubelet && systemctl enable kubelet

docker info | grep -i cgroup
vi ./usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"

systemctl daemon-reload
systemctl restart kubelet


kubeadm init --token-ttl=0


#INSTALACAO K8S NETWORK:

waeve:
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"




[root@zaster01 ~]# cat /etc/docker/daemon.json
{
   "insecure-registries": [
    "registry.stelo.intranet:5000"
  ],
  "disable-legacy-registry": true
}